// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Croots
LogicalVector Croots(NumericVector x);
RcppExport SEXP _testpkg_Croots(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Croots(x));
    return rcpp_result_gen;
END_RCPP
}
// lenFind
NumericVector lenFind(NumericVector Time, NumericVector Infected);
RcppExport SEXP _testpkg_lenFind(SEXP TimeSEXP, SEXP InfectedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Infected(InfectedSEXP);
    rcpp_result_gen = Rcpp::wrap(lenFind(Time, Infected));
    return rcpp_result_gen;
END_RCPP
}
// epidemic
bool epidemic(NumericMatrix x);
RcppExport SEXP _testpkg_epidemic(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(epidemic(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_testpkg_Croots", (DL_FUNC) &_testpkg_Croots, 1},
    {"_testpkg_lenFind", (DL_FUNC) &_testpkg_lenFind, 2},
    {"_testpkg_epidemic", (DL_FUNC) &_testpkg_epidemic, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_testpkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
